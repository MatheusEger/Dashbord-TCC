import streamlit as st
import pandas as pd
import sqlite3
import plotly.express as px
from pathlib import Path
from datetime import datetime, timedelta
from dateutil.relativedelta import relativedelta

st.set_page_config(page_title="Comparador de FIIs - Iniciante", layout="wide")
# CSS tooltips
st.markdown(
    """
    <style>
    .tooltip{position:relative;display:inline-block;cursor:help}
    .tooltip .tooltiptext{visibility:hidden;width:150px;background:#333;color:#fff;text-align:center;border-radius:4px;padding:5px;position:absolute;z-index:1;bottom:100%;left:50%;transform:translateX(-50%);opacity:0;transition:opacity .3s}
    .tooltip:hover .tooltiptext{visibility:visible;opacity:1}
    </style>
    """, unsafe_allow_html=True)

# +++ Slider de per√≠odo para dividendos +++
years_div = 1 #st.sidebar.slider("Per√≠odo de Dividendos (anos)", 1, 10, 1)

# Slider de per√≠odo para cota√ß√£o na sidebar
years_cot = st.sidebar.slider("Per√≠odo da Cota√ß√£o (anos)", 1, 10, 5)


# Explica√ß√£o dos Indicadores e Gr√°ficos na sidebar
st.sidebar.header("‚ÑπÔ∏è O que s√£o esses Indicadores e Gr√°ficos?")
st.sidebar.markdown(r"""
    - **Pre√ßo Atual**: √∫ltimo pre√ßo de fechamento na Bolsa, serve como refer√™ncia para compra e venda.  

    - **Patrim√¥nio L√≠quido (PL)**: total dos ativos do fundo (im√≥veis, t√≠tulos, caixa etc.) menos as d√≠vidas e obriga√ß√µes.  
      Mostra o ‚Äútamanho real‚Äù do fundo.

    - **Quantidade de Cotas**: n√∫mero total de cotas emitidas pelo fundo.  
      Usado para calcular valores por cota.

    - **Valor Patrimonial por Cota (VPA)**: PL √∑ quantidade de cotas.  
      Ex.: se o PL √© R\$ 100 mi e h√° 1 mi de cotas, o VPA √© R\$ 100 por cota.

    - **Pre√ßo/VPA (P/VP)**: mostra quanto voc√™ ‚Äúpaga‚Äù pela cota em rela√ß√£o ao valor patrimonial.  
      - **P/VP < 1 (Desconto)** ‚Üí cota√ß√£o abaixo do valor cont√°bil (voc√™ paga menos que R\$ 1,00 para cada R\$ 1,00 de patrim√¥nio).  
        ‚Ä¢ Ex.: P/VP = 0,90 ‚Üí voc√™ paga R\$ 0,90 por cada R\$ 1,00 de patrim√¥nio (desconto de 10%).  
      - **P/VP > 1 (√Ågio)** ‚Üí cota√ß√£o acima do valor cont√°bil (voc√™ paga mais que R\$ 1,00 para cada R\$ 1,00 de patrim√¥nio).  
        ‚Ä¢ Ex.: P/VP = 1,10 ‚Üí voc√™ paga R\$ 1,10 por cada R\$ 1,00 de patrim√¥nio (√°gio de 10%).

    - **Dividend Yield 12M (DY 12M)**: soma dos dividendos pagos nos √∫ltimos 12 meses √∑ pre√ßo atual da cota.  
      Indica a rentabilidade anual ‚Äúpor dividendos‚Äù.  

    - **Cota√ß√£o Semanal**: sequ√™ncia do pre√ßo de fechamento de cada semana, ajudando a identificar tend√™ncias de curto/m√©dio prazo.  

    - **Dividendos nos √öltimos 12 Meses**: total dos dividendos mensais acumulados no per√≠odo, mostrando o rendimento bruto.
""", unsafe_allow_html=True)


st.sidebar.markdown(r"""
- **Exemplo**: custo de administra√ß√£o: R\$0,50% ao ano  
- Para indicar um range: de R\$10 a R\$20  
""", unsafe_allow_html=True)

st.sidebar.markdown("""
- **Exemplo**: custo de administra√ß√£o: R&#36;0,50% ao ano  
- Para indicar um range: de R&#36;10 a R&#36;20  
""", unsafe_allow_html=True)

st.markdown("<h1 style='text-align:center;'>üìë Comparador de Fundos Imobili√°rios</h1>", unsafe_allow_html=True)

DB_PATH = Path(__file__).resolve().parents[1] / "data" / "fiis.db"
with sqlite3.connect(DB_PATH) as conn:
    # 1) carrega FIIs e demais tabelas
    fiis    = pd.read_sql("SELECT id, ticker, nome, gestao, admin, setor_id, tipo_id FROM fiis WHERE ativo = 1", conn)
    setores = pd.read_sql("SELECT id, nome FROM setor", conn)
    cot    = pd.read_sql("SELECT fii_id, data, preco_fechamento FROM cotacoes", conn, parse_dates=['data'])
    inds   = pd.read_sql(
        """
        SELECT fi.fii_id, i.nome AS indicador, fi.valor, fi.data_referencia
        FROM fiis_indicadores fi
        JOIN indicadores i ON fi.indicador_id = i.id
        """, conn, parse_dates=['data_referencia']
    )

    # ‚îÄ‚îÄ‚îÄ> aqui, carregue tamb√©m a tabela de tipos:
    tipos = pd.read_sql(
        "SELECT id AS tipo_id, nome AS tipo, descricao AS tipo_desc FROM tipo_fii",
        conn
    )

# 2) fa√ßa o merge de tipos com o DataFrame de FIIs
fiis = fiis.merge(tipos, on="tipo_id", how="left")
def prepare(ticker, years_div):
    dy = 0.0
    row = fiis[fiis['ticker']==ticker].iloc[0]
    setor = setores.set_index('id').loc[row['setor_id'], 'nome'] \
               if row['setor_id'] in setores['id'].values else 'N/A'
    df_ind = inds[inds['fii_id']==row['id']].copy()
    df_ind.set_index('data_referencia', inplace=True)
    df_ind = inds[inds['fii_id']==row['id']].copy()
    pl = None
    if 'Patrim√¥nio L√≠quido' in df_ind['indicador'].values:
        pl = float(df_ind[df_ind['indicador']=='Patrim√¥nio L√≠quido']['valor'].iloc[-1])
    cotas = None
    if 'Quantidade de Cotas' in df_ind['indicador'].values:
        cotas = float(df_ind[df_ind['indicador']=='Quantidade de Cotas']['valor'].iloc[-1])
    df_price = cot[cot['fii_id']==row['id']]
    price = df_price.sort_values('data')['preco_fechamento'].iloc[-1] if not df_price.empty else None
    vpa = pl/cotas if pl and cotas else None
    pvp = price/vpa if price and vpa else None
    one_period_ago = datetime.now() - relativedelta(years=years_div)

    # filtra dividendos daquele ticker e per√≠odo
    divs_all = df_ind[
        (df_ind['indicador'] == 'Dividendos') &
        (df_ind['data_referencia'] >= one_period_ago)
    ]

    if price and not divs_all.empty:
         dy = divs_all['valor'].sum() / price * 100

    # ‚Ä¶ c√°lculos de pl, cotas, price, vpa, pvp, df_price, df_ind ‚Ä¶
    return row, setor, pl, cotas, price, vpa, pvp, dy, df_price, df_ind

# +++ filtro por Tipo +++
tipo_names    = tipos['tipo'].tolist()
selected_tipo = st.selectbox("Selecione o Tipo", tipo_names)

# aplica o filtro de tipo
fiis = fiis[fiis['tipo'] == selected_tipo]

setores_validos = setores[setores['id'].isin(fiis['setor_id'])]
setor_names    = sorted(setores_validos['nome'].unique())
selected_setor = st.selectbox("Selecione o Setor", setor_names)

# 2) Descobre o ID do setor e filtra os FIIs ativos daquele setor
setor_id = setores_validos.loc[setores_validos['nome'] == selected_setor, 'id'].iloc[0]
fiis_setor = fiis[fiis['setor_id'] == setor_id]

# ‚îÄ‚îÄ Agora, na √°rea principal, crie as duas colunas:
col1, col2 = st.columns(2)

f1 = col1.selectbox(
    "Selecione Fundo 1",
    fiis_setor['ticker'].sort_values(),
    key='f1'
)

tickers_f2 = fiis_setor.loc[fiis_setor['ticker'] != f1, 'ticker'].sort_values()
f2 = col2.selectbox(
    "Selecione Fundo 2",
    tickers_f2,
    key='f2'
)

data1 = prepare(f1, years_div)
data2 = prepare(f2, years_div)

for c, data in zip([col1, col2], [data1, data2]):
    row, setor, pl, cotas, price, vpa, pvp, dy, df_price, df_ind = data
    c.markdown(f"### {row['ticker']} ‚Äî {row['nome']}")
    c.markdown(
        f"**Setor:** {setor}  &nbsp; "
        f"**Gestora:** {row['gestao']}  &nbsp; "
        f"**Admin:** {row['admin']}"
    )

    # fun√ß√£o human_format como voc√™ j√° tinha
    def human_format(num):
        if num is None: return "N/A"
        magnitude = 0
        for unit in ['', ' mil', ' Mi', ' Bi']:
            if abs(num) < 1000.0:
                return f"{num:,.2f}{unit}"
            num /= 1000.0
        return f"{num:,.2f} Bi"

    # 1¬™ linha: Pre√ßo Atual / Patrim√¥nio L√≠quido
    r1 = c.columns(2)
    r1[0].markdown(
        "<div class='tooltip'>Pre√ßo Atual ‚ÑπÔ∏è"
        "<span class='tooltiptext'>√öltimo pre√ßo de fechamento</span></div>",
        unsafe_allow_html=True
    )
    r1[0].metric(label="", value=f"R$ {price:,.2f}" if price else "N/A")
    r1[1].markdown(
        "<div class='tooltip'>Patrim√¥nio L√≠quido (PL) ‚ÑπÔ∏è"
        "<span class='tooltiptext'>Ativos menos passivos</span></div>",
        unsafe_allow_html=True
    )
    r1[1].metric(label="", value=f"R$ {human_format(pl)}" if pl else "N/A")

    # 2¬™ linha: Quantidade Cotas / VPA
    r2 = c.columns(2)
    r2[0].markdown(
        "<div class='tooltip'>Quantidade Cotas ‚ÑπÔ∏è"
        "<span class='tooltiptext'>Total de cotas emitidas</span></div>",
        unsafe_allow_html=True
    )
    r2[0].metric(label="", value=f"{human_format(cotas)}" if cotas else "N/A")
    r2[1].markdown(
        "<div class='tooltip'>VPA ‚ÑπÔ∏è"
        "<span class='tooltiptext'>Valor patrimonial por cota (PL √∑ Cotas)</span></div>",
        unsafe_allow_html=True
    )
    r2[1].metric(label="", value=f"R$ {vpa:,.2f}" if vpa else "N/A")

    # 3¬™ linha: P/VP / DY
    r3 = c.columns(2)
    r3[0].markdown(
        "<div class='tooltip'>P/VP ‚ÑπÔ∏è"
        "<span class='tooltiptext'>Pre√ßo de mercado √∑ VPA</span></div>",
        unsafe_allow_html=True
    )
    r3[0].metric(label="", value=f"{pvp:.2f}" if pvp else "N/A")
    with sqlite3.connect(DB_PATH) as conn_im:
        df_qt = pd.read_sql(
        "SELECT COUNT(*) AS qtd FROM fiis_imoveis WHERE fii_id = ?",
        conn_im,
        params=(int(row["id"]),),
    )
    qtd_imoveis = int(df_qt["qtd"].iloc[0]) if not df_qt.empty else 0

    if qtd_imoveis > 0:
        # exibe N√∫mero de Im√≥veis
        r3[1].markdown(
            "<div class='tooltip'>N√∫mero de Im√≥veis ‚ÑπÔ∏è"
            "<span class='tooltiptext'>Total de im√≥veis no portf√≥lio do fundo</span></div>",
            unsafe_allow_html=True
        )
    r3[1].metric(label="", value=f"{qtd_imoveis}")

    c.markdown("---")

    # Gr√°ficos empilhados verticalmente
    # Cota√ß√£o Semanal
    if not df_price.empty:
        # data m√≠nima dispon√≠vel para este fundo
        data_min = df_price['data'].min()

        # determina cutoff: anos atr√°s, mas n√£o antes do primeiro dado
        cutoff_user = datetime.now() - relativedelta(years=years_cot)
        cutoff = max(cutoff_user, data_min)

        # filtra pelo per√≠odo ajustado
        df_filtered = df_price[df_price['data'] >= cutoff]

        if df_filtered.empty:
            c.info("Sem dados de cota√ß√£o para o per√≠odo selecionado.")
        else:
            # resample semanal gen√©rico e descarta NaN
            df_week = (
                df_filtered
                .set_index('data')
                .resample('W')['preco_fechamento']
                .last()
                .dropna()
                .reset_index()
            )

            if df_week.empty:
                c.info("N√£o h√° cota√ß√µes semanais suficientes para plotar o gr√°fico.")
            else:
                fig1 = px.line(
                    df_week,
                    x='data',
                    y='preco_fechamento',
                    title='Cota√ß√£o Semanal',
                    labels={'data':'Data','preco_fechamento':'R$'}
                )
                # opcional: ajustar formata√ß√£o din√¢mica do eixo X
                fig1.update_xaxes(tickformat='%Y-%m', nticks=6)
                fig1.update_traces(line=dict(width=3), selector=dict(type='scatter'))
                c.plotly_chart(fig1, use_container_width=True)

    # Dividendos 12 Meses
    if not df_ind[df_ind['indicador']=='Dividendos'].empty:
        df_div = df_ind[df_ind['indicador']=='Dividendos'].copy()
        # usa a coluna data_referencia para extrair m√™s
        df_div['mes'] = pd.to_datetime(df_div['data_referencia']).dt.to_period('M').dt.to_timestamp()
        mensal = df_div.groupby('mes')['valor'].sum().reset_index()
        fig2 = px.bar(
            mensal.sort_values('mes').tail(12),
            x='mes',
            y='valor',
            title='Dividendos 12 Meses',
            labels={'mes': 'M√™s/Ano', 'valor': 'R$'}
        )
        fig2.update_xaxes(tickformat='%b/%Y', dtick='M1', tickangle=-45)
        c.plotly_chart(fig2, use_container_width=True)

    # 1) Se√ß√£o Im√≥veis
    c.subheader("Im√≥veis")
    fii_id = int(row["id"])  # usa row, n√£o 'f'

    # 2) Consulta ao banco
    with sqlite3.connect(DB_PATH) as conn_im:
        df_imoveis = pd.read_sql(
            """
            SELECT area_m2,
                   num_unidades,
                   tx_ocupacao
            FROM fiis_imoveis
            WHERE fii_id = ?
            """,
            conn_im,
            params=(fii_id,),
        )

    # 3) Exibe ou informa√ß√£o de aus√™ncia de dados
    if df_imoveis.empty:
        c.info("Nenhum dado de im√≥veis dispon√≠vel para este fundo.")
    else:
        total_imoveis  = len(df_imoveis)
        total_unidades = df_imoveis["num_unidades"].sum()
        total_area     = df_imoveis["area_m2"].sum()
        weighted_ocup  = (df_imoveis["area_m2"] * df_imoveis["tx_ocupacao"]).sum() / total_area
        vac_phys       = 100 - weighted_ocup

        # 4) Formata a √°rea em BR
        area_str = (
            f"{total_area:,.2f}"
            .replace(",", "X")
            .replace(".", ",")
            .replace("X", ".")
        )

        # 5) Duas m√©tricas por linha
        # primeira linha: Total de im√≥veis + Total de unidades
        r1c1, r1c2 = c.columns(2)
        r1c1.markdown(
            "<div class='tooltip'>Total de im√≥veis ‚ÑπÔ∏è"
            "<span class='tooltiptext'>N√∫mero total de im√≥veis que comp√µem o portf√≥lio do fundo</span></div>",
            unsafe_allow_html=True
        )
        r1c1.metric(label="", value=total_imoveis)

        r1c2.markdown(
            "<div class='tooltip'>Total de unidades ‚ÑπÔ∏è"
            "<span class='tooltiptext'>Soma de todas as unidades habitacionais/comerciais</span></div>",
            unsafe_allow_html=True
        )
        r1c2.metric(label="", value=total_unidades)

        # segunda linha: √Årea total + Vac√¢ncia F√≠sica
        r2c1, r2c2 = c.columns(2)
        r2c1.markdown(
            "<div class='tooltip'>√Årea total (m¬≤) ‚ÑπÔ∏è"
            "<span class='tooltiptext'>Total da √°rea em metros quadrados de todos os im√≥veis</span></div>",
            unsafe_allow_html=True
        )
        r2c1.metric(label="", value=area_str)

        r2c2.markdown(
            "<div class='tooltip'>Vac√¢ncia F√≠sica (%) ‚ÑπÔ∏è"
            "<span class='tooltiptext'>Percentual de √°rea vaga calculado como 100% menos a ocupa√ß√£o ponderada</span></div>",
            unsafe_allow_html=True
        )
        r2c2.metric(label="", value=f"{vac_phys:.2f}%")

